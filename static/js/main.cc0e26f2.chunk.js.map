{"version":3,"sources":["components/Header.js","components/MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","React","Component","MemeGenerator","state","topText","bottomText","randomImage","allMemeImgs","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","randNum","Math","floor","random","length","randMemeImgUrl","url","fetch","then","response","json","data","memes","className","onSubmit","this","type","placeholder","onChange","src","alt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0NAYeA,E,4JATX,WACI,OACI,iCACI,sD,GAJKC,IAAMC,W,OCANC,E,4MACjBC,MAAQ,CACJC,QAAS,GACTC,WAAY,GACZC,YAAa,iCACbC,YAAa,I,EAGjBC,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAclCC,aAAe,SAACL,GACZA,EAAEM,iBACF,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAW,EAAKhB,MAAMI,YAAYa,QAC5DC,EAAiB,EAAKlB,MAAMI,YAAYS,GAASM,IACvD,EAAKZ,SAAS,CAAEJ,YAAae,K,uDAdjC,WAAqB,IAAD,OAChBE,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OACV,EAAKf,SAAS,CACVH,YAAakB,EAASE,KAAKC,a,oBAW3C,WACI,OACI,sBAAKC,UAAU,iBAAf,UACI,uBAAMC,SAAUC,KAAKjB,aAArB,UACI,uBACIkB,KAAK,OACLpB,KAAK,UACLqB,YAAY,eACZpB,MAAOkB,KAAK5B,MAAMC,QAClB8B,SAAUH,KAAKvB,eAEnB,uBACIwB,KAAK,OACLpB,KAAK,aACLqB,YAAY,kBACZpB,MAAOkB,KAAK5B,MAAME,WAClB6B,SAAUH,KAAKvB,eAEnB,uBAAOwB,KAAK,SAASnB,MAAM,iBAE/B,sBAAKgB,UAAU,OAAf,UACI,qBAAKM,IAAKJ,KAAK5B,MAAMG,YAAa8B,IAAI,eACtC,oBAAIP,UAAU,WAAd,SAA0BE,KAAK5B,MAAMC,UACrC,oBAAIyB,UAAU,cAAd,SAA6BE,KAAK5B,MAAME,uB,GArDjBJ,aCY5BoC,MATf,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCGSC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.cc0e26f2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return(\r\n            <header>\r\n                <h1>Meme Generator</h1>\r\n            </header>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nexport default class MemeGenerator extends Component {\r\n    state = {\r\n        topText: \"\",\r\n        bottomText: \"\",\r\n        randomImage: \"https://i.imgflip.com/26am.jpg\",\r\n        allMemeImgs: []\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response =>\r\n                this.setState({\r\n                    allMemeImgs: response.data.memes\r\n                })\r\n            );\r\n    } \r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\r\n        const randMemeImgUrl = this.state.allMemeImgs[randNum].url;\r\n        this.setState({ randomImage: randMemeImgUrl });\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"meme-container\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"topText\"\r\n                        placeholder=\"Add Top Text\"\r\n                        value={this.state.topText}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"bottomText\"\r\n                        placeholder=\"Add Bottom Text\"\r\n                        value={this.state.bottomText}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <input type=\"submit\" value=\"Generator\" />\r\n                </form>\r\n                <div className=\"meme\">\r\n                    <img src={this.state.randomImage} alt=\"Meme image\"/>\r\n                    <h2 className=\"top-text\">{this.state.topText}</h2>\r\n                    <h2 className=\"bottom-text\">{this.state.bottomText}</h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}","import React from 'react';\n\nimport Header from './components/Header';\nimport MemeGenerator from './components/MemeGenerator';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}